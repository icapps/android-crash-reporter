apply plugin: 'com.android.library'
apply plugin: 'maven'

def artifactName = 'crashlog'
def packageName = 'com.icapps.crashreporter'
def libraryVersion = '0.0.6'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"


    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 21
        versionCode 1
        versionName libraryVersion
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

configurations {
    deployLibrary
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.splunk.mint:mint:4.2.1'
    compile 'com.google.android.gms:play-services-analytics:7.5.0'

    deployLibrary "ar.com.synergian:wagon-git:0.2.0"
}

task androidJavadocs(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

task lookForArtifacts {
    def libraryName = artifactName + '-' + libraryVersion + '.aar'
    def repositoryPath = packageName.replace(".", "/") + "/" + artifactName + "/" + libraryVersion + "/" + libraryName
    def repositoryUrl = 'https://api.bitbucket.org/1.0/repositories/icapps/maven_repository/raw/releases/' + repositoryPath

    println("")
    println("Checking if artifact already exists: " + libraryName)
    println("at URL: " + repositoryUrl)

    def artifactExists = urlExists(repositoryUrl)
    println(artifactExists ? "existing artifact found" : "no existing artifact found")
    println("")

    if (urlExists(repositoryUrl)) {
        throw new RuntimeException("Artifact with version " + libraryVersion + " already exist - not executing uploadArchives")
    }
    return true
}

uploadArchives.dependsOn lookForArtifacts

uploadArchives {

    repositories.mavenDeployer {
        configuration = configurations.deployLibrary
        repository(url: 'git:releases://git@bitbucket.org:icapps/maven_repository.git')

        uniqueVersion = true

        pom.project {
            groupId = packageName
            version = libraryVersion
            artifactId = artifactName
            packaging 'aar'

            repositories {
                repository {
                    id 'splunk'
                    url 'https://mint.splunk.com.gradle/'
                }
            }
        }
    }
}

private static boolean urlExists(String repositoryUrl) {

    try {
        def connection = (HttpURLConnection) new URL(repositoryUrl).openConnection()

        def credentials = "bWF2ZW5fcmVhZG9ubHk6UnBoZkZ1a0RFZXV2YlBodnhGc3U="
        connection.setRequestProperty("Authorization", "Basic " + credentials)
        connection.setConnectTimeout(10000)
        connection.setReadTimeout(10000)
        connection.setRequestMethod("HEAD")

        def responseCode = connection.getResponseCode()
        println("responseCode: " + responseCode)

        return (200 == responseCode)
    } catch (IOException ignored) {
        return false
    }
}

